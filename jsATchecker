window.addEventListener("DOMContentLoaded", () => {
  // Gestion du bouton "Nouveau projet/tâche"
  const buttonProject = document.querySelector(".project");
  buttonProject?.addEventListener("click", (e) => {
    e.preventDefault();
    window.location.href = "createProject";
  });

  // Gestion des tâches dans chaque projet
  const taskGroups = document.querySelectorAll(".cardProject");
  taskGroups.forEach((group) => {
    const tasks_check = group.querySelectorAll(".bi-check2-circle");
    const liItems = group.querySelectorAll(".currentTask");
    const finishBtn = group.querySelector("#finish");
    const tasks_delete = group.querySelectorAll(".bi-x");

    if (finishBtn) finishBtn.disabled = true;

    //                                     //
    // ===== Suppression d'une tâche ===== //
    //                                     //
    tasks_delete.forEach((task, index) => {
      task.addEventListener("click", (e) => {
        e.preventDefault();

        const li = liItems[index];
        const form = task.closest("form");
        const formData = new FormData(form);

        fetch("updateTaskStatus", {
          method: "POST",
          body: formData,
        })
          .then((res) => res.text())
          .then((text) => {
            try {
              const data = JSON.parse(text);

              if (data.success) {
                // Supprime la tâche du DOM
                form.remove();

                // Recompte les tâches restantes
                if (finishBtn) {
                  const remainingTasks =
                    group.querySelectorAll(".currentTask").length;
                  finishBtn.disabled = remainingTasks !== 0;
                }
              } else {
                console.error(
                  "Erreur serveur :",
                  data.message || "Réponse invalide"
                );
              }
            } catch (err) {
              console.error("Réponse non JSON :", text);
            }
          })
          .catch((err) => {
            console.error("Erreur requête :", err);
          });
      });
    });

    //                                                                                //
    // ===== Changement du statut "fait" d'une tâche (tâche barrée : avec AJAX) ===== //
    //                                                                                //
    tasks_check.forEach((task, index) => {
      task.addEventListener("click", (e) => {
        e.preventDefault();

        const li = liItems[index];
        const form = task.closest("form");
        const formData = new FormData(form);

        // Détermine le nouvel état à envoyer
        const isCompleted = li.style.textDecoration === "line-through";
        const newDoneValue = isCompleted ? "0" : "1";
        formData.append("done", newDoneValue);

        // Appel AJAX pour updateTaskStatus
        fetch("updateTaskStatus", {
          method: "POST",
          body: formData,
        })
          .then((res) => res.text())
          .then((text) => {
            try {
              const data = JSON.parse(text);

              if (data.success) {
                // Applique les changements visuels
                if (newDoneValue === "1") {
                  task.style.color = "green";
                  task.style.scale = "1.2";
                  li.style.textDecoration = "line-through";
                } else {
                  task.style.color = "";
                  task.style.scale = "1";
                  li.style.textDecoration = "none";
                }

                // Active/désactive le bouton "finish"
                const allDone = Array.from(liItems).every(
                  (item) => item.style.textDecoration === "line-through"
                );
                if (finishBtn) finishBtn.disabled = !allDone;
              } else {
                console.error(
                  "Erreur serveur :",
                  data.message || "Réponse invalide"
                );
              }
            } catch (err) {
              console.error("Réponse non JSON :", text);
            }
          })
          .catch((err) => {
            console.error("Erreur requête :", err);
          });
      });
    });
  });

  // Gestion du menu burger
  const menuBurger = document.getElementById("toggleMenu");
  const ulNav = document.getElementById("ulNav");
  menuBurger?.addEventListener("click", () => {
    const visible = ulNav.style.display === "flex";
    ulNav.style.display = visible ? "none" : "flex";
  });

  // --- AJOUT : gestion de la mise à jour de la priorité ---

  document.querySelectorAll(".priority-radio").forEach((radio) => {
    radio.addEventListener("change", (event) => {
      const taskId = event.target.dataset.taskId;
      const priority = event.target.value;

      // Cible le <form> au lieu du <li>
      const form = event.target.closest("form");

      if (form) {
        // Nettoie les anciennes classes de fond
        form.classList.remove(
          "bg-priority-red",
          "bg-priority-orange",
          "bg-priority-green"
        );

        // Ajoute la bonne classe selon la priorité choisie
        switch (parseInt(priority)) {
          case 1:
            form.classList.add("bg-priority-red");
            break;
          case 2:
            form.classList.add("bg-priority-orange");
            break;
          case 3:
            form.classList.add("bg-priority-green");
            break;
        }
      }

      // Envoie la priorité en BDD
      fetch("update_priority.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ taskId, priority }),
      })
        .then((res) => res.json())
        .then((data) => {
          if (!data.success) {
            console.error("Erreur côté serveur :", data.error || "inconnue");
          }
        })
        .catch((err) => {
          console.error("Erreur réseau :", err);
        });
    });
  });

  // Afficher les projets par catégorie (AJAX)  //

  // Conteneur des projets
  const container = document.querySelector("#projects-container");

  //
  // Fonction pour générer les projets à partir du JSON en HTML
  // ==========================================================
  function renderProjects(projects) {
    const container = document.querySelector("#projects-container");
    container.innerHTML = ""; // vide le conteneur

    if (!projects || projects.length === 0) {
      container.innerHTML = "<p>Aucun projet pour le moment.</p>";
      return;
    }

    const priorityMap = {
      1: "bg-priority-red",
      2: "bg-priority-orange",
      3: "bg-priority-green",
      urgent: "bg-priority-red",
      medium: "bg-priority-orange",
      normal: "bg-priority-green",
    };

    projects.forEach((projet) => {
      const card = document.createElement("div");
      card.classList.add("cardProject");

      // Titre du projet
      const h3 = document.createElement("h3");
      h3.textContent = projet.project_name;
      card.appendChild(h3);

      // Liste des tâches
      const ul = document.createElement("ul");

      if (projet.tasks && projet.tasks.length > 0) {
        projet.tasks.forEach((task) => {
          const form = document.createElement("form");
          form.classList.add("formProject", "task");
          form.method = "POST";
          form.onsubmit = () => false;

          // Déterminer la classe de fond
          const priorityClass = priorityMap[String(task.priority)] || null;
          if (priorityClass) form.classList.add(priorityClass);

          // Input caché
          const inputHidden = document.createElement("input");
          inputHidden.type = "hidden";
          inputHidden.name = "currentTask";
          inputHidden.value = task.task;
          form.appendChild(inputHidden);

          // Li pour la tâche
          const li = document.createElement("li");
          li.className = "currentTask " + (task.done ? "done" : "");
          li.textContent = task.task;

          // Groupe de radios de priorité
          const priorityDiv = document.createElement("div");
          priorityDiv.classList.add("priority-group");

          for (let i = 1; i <= 3; i++) {
            const label = document.createElement("label");
            label.className =
              i === 1
                ? "priority-red"
                : i === 2
                ? "priority-orange"
                : "priority-green";
            label.style.marginRight = "8px";

            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = `priority_${task.Id_tasks}`;
            radio.value = i;
            radio.classList.add("priority-radio");
            radio.dataset.taskId = task.Id_tasks;

            // Cocher correctement la radio
            if (String(task.priority) === String(i)) radio.checked = true;

            label.appendChild(radio);
            label.appendChild(
              document.createTextNode(
                i === 1 ? "Urgent" : i === 2 ? "Important" : "Normal"
              )
            );

            priorityDiv.appendChild(label);
          }

          li.appendChild(priorityDiv);
          form.appendChild(li);

          // Boutons d'action
          const btnDiv = document.createElement("div");
          btnDiv.classList.add("formProject__btn_action");

          const btnCheck = document.createElement("button");
          btnCheck.type = "button";
          btnCheck.classList.add("btnCheck");
          btnCheck.innerHTML = '<i class="bi bi-check2-circle"></i>';
          btnDiv.appendChild(btnCheck);

          const inputDelete = document.createElement("input");
          inputDelete.type = "hidden";
          inputDelete.name = "deleteTask";
          inputDelete.value = task.Id_tasks;
          btnDiv.appendChild(inputDelete);

          const btnDelete = document.createElement("button");
          btnDelete.classList.add("btnDelete");
          btnDelete.innerHTML = '<i class="bi bi-x"></i>';
          btnDiv.appendChild(btnDelete);

          form.appendChild(btnDiv);

          ul.appendChild(form);
        });
      } else {
        const li = document.createElement("li");
        li.textContent = "⚠️ Aucune tâche pour ce projet";
        ul.appendChild(li);
      }

      card.appendChild(ul);

      // Formulaire pour terminer le projet
      const finishForm = document.createElement("form");
      finishForm.method = "GET";

      const finishInput = document.createElement("input");
      finishInput.type = "hidden";
      finishInput.name = "deleteProject";
      finishInput.value = projet.Id_project;
      finishForm.appendChild(finishInput);

      const finishBtn = document.createElement("button");
      finishBtn.id = "finish";
      finishBtn.textContent = "Terminé !";
      finishForm.appendChild(finishBtn);

      // Vérifier si toutes les tâches sont déjà faites
      const allDone =
        projet.tasks && projet.tasks.length > 0
          ? projet.tasks.every((task) => task.done)
          : false;
      finishBtn.disabled = !allDone;

      card.appendChild(finishForm);
      container.appendChild(card);
    });
  }

  //
  // Gestion des boutons de filtre
  // ==============================
  document.querySelectorAll(".project_category__form").forEach((form) => {
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const priority = form.querySelector("[name=category]").value;

      fetch("display_project_category.php", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ priority }),
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.success) {
            renderProjects(data.projects);
          } else {
            console.error("Erreur serveur :", data.message);
          }
        })
        .catch((err) => console.error("Erreur réseau :", err));
    });
  });
});

//btn check :
if (btnCheck) {
  e.preventDefault();
  const form = btnCheck.closest("form");
  const li = form.querySelector(".currentTask");
  const formData = new FormData(form);

  const isCompleted = li.style.textDecoration === "line-through";
  formData.append("done", isCompleted ? "0" : "1");

  fetch("updateTaskStatus.php", { method: "POST", body: formData })
    .then((res) => res.json())
    .then((data) => {
      if (data.success) {
        li.style.textDecoration = isCompleted ? "none" : "line-through";
        btnCheck.style.color = isCompleted ? "" : "green";
        btnCheck.style.scale = isCompleted ? "1" : "1.2";

        // Met à jour le bouton "Terminé"
        const card = form.closest(".cardProject");
        const allDone = Array.from(card.querySelectorAll(".currentTask")).every(
          (item) => item.style.textDecoration === "line-through"
        );
        const finishBtn = card.querySelector("#finish");
        if (finishBtn) finishBtn.disabled = !allDone;
      } else console.error(data.message);
    })
    .catch((err) => console.error("Erreur réseau :", err));
}

//btn delette :
if (btnDelete) {
  e.preventDefault();
  const form = btnDelete.closest("form");
  const formData = new FormData(form);

  fetch("updateTaskStatus.php", { method: "POST", body: formData })
    .then((res) => res.json())
    .then((data) => {
      if (data.success) {
        form.remove();

        // Met à jour le bouton "Terminé"
        const card = form.closest(".cardProject");
        const finishBtn = card.querySelector("#finish");
        if (finishBtn) {
          const remaining = card.querySelectorAll(".currentTask").length;
          finishBtn.disabled = remaining > 0;
        }
      } else console.error(data.message);
    })
    .catch((err) => console.error("Erreur réseau :", err));
}

// SCRIPT.JS  //
function renderProjects(projects) {
  container.innerHTML = "";
  if (!projects || projects.length === 0) {
    container.innerHTML = "<p>Aucun projet pour le moment.</p>";
    return;
  }

  projects.forEach((projet) => {
    const card = document.createElement("div");
    card.classList.add("cardProject");

    // Conteneur titre + compteur
    const countTasksDiv = document.createElement("div");
    countTasksDiv.classList.add("cardProject__countTasks");

    const h3 = document.createElement("h3");
    h3.textContent = projet.project_name;
    countTasksDiv.appendChild(h3);

    const spanCount = document.createElement("span");
    spanCount.id = "count_tasks_" + projet.Id_project;
    spanCount.title = "Nombre de tâches";
    spanCount.textContent = projet.tasks ? projet.tasks.length : 0;
    countTasksDiv.appendChild(spanCount);

    card.appendChild(countTasksDiv);

    // Liste des tâches
    const ul = document.createElement("ul");
    if (projet.tasks && projet.tasks.length > 0) {
      projet.tasks.forEach((task) => {
        const formTask = document.createElement("form");
        formTask.classList.add("formProject", "task");
        formTask.method = "POST";
        formTask.onsubmit = () => false;

        if (task.priority_task && priorityMap[task.priority_task])
          formTask.classList.add(priorityMap[task.priority_task]);

        const li = document.createElement("li");
        li.className = "currentTask" + (task.done ? " done" : "");

        const liTextDiv = document.createElement("div");
        liTextDiv.classList.add("currentTask__text");
        liTextDiv.textContent = task.task;

        if (task.deadline) {
          const spanDeadline = document.createElement("span");
          spanDeadline.classList.add("deadline");
          spanDeadline.dataset.deadline = task.deadline;

          const dateObj = new Date(task.deadline);
          const day = String(dateObj.getDate()).padStart(2, "0");
          const month = String(dateObj.getMonth() + 1).padStart(2, "0");
          const year = dateObj.getFullYear();
          spanDeadline.textContent = ` ⏳ ${day}/${month}/${year}`;

          liTextDiv.appendChild(spanDeadline);
        }

        li.appendChild(liTextDiv);

        // Priorité radio
        const priorityDiv = document.createElement("div");
        priorityDiv.classList.add("priority-group");
        for (let i = 1; i <= 3; i++) {
          const label = document.createElement("label");
          label.className =
            i === 1
              ? "priority-red"
              : i === 2
              ? "priority-orange"
              : "priority-green";
          label.style.marginRight = "8px";

          const radio = document.createElement("input");
          radio.type = "radio";
          radio.name = `priority_${task.Id_tasks}`;
          radio.value = i;
          radio.classList.add("priority-radio");
          radio.dataset.taskId = task.Id_tasks;
          if (task.priority_task == i) radio.checked = true;

          label.appendChild(radio);
          label.appendChild(
            document.createTextNode(
              i === 1 ? "Urgent" : i === 2 ? "Important" : "Normal"
            )
          );
          priorityDiv.appendChild(label);
        }

        li.appendChild(priorityDiv);
        formTask.appendChild(li);

        // Boutons check/delete
        const btnDiv = document.createElement("div");
        btnDiv.classList.add("formProject__btn_action");

        const inputTaskId = document.createElement("input");
        inputTaskId.type = "hidden";
        inputTaskId.name = "taskId";
        inputTaskId.value = task.Id_tasks;

        const inputDone = document.createElement("input");
        inputDone.type = "hidden";
        inputDone.name = "doneTask";
        inputDone.value = task.done;

        const btnCheck = document.createElement("button");
        btnCheck.type = "submit";
        btnCheck.classList.add("btnCheck");
        btnCheck.innerHTML = '<i class="bi bi-check2-circle"></i>';

        const inputDelete = document.createElement("input");
        inputDelete.type = "hidden";
        inputDelete.name = "deleteTask";
        inputDelete.value = task.Id_tasks;

        const btnDelete = document.createElement("button");
        btnDelete.type = "submit";
        btnDelete.classList.add("btnDelete");
        btnDelete.innerHTML = '<i class="bi bi-x"></i>';

        btnDiv.append(inputTaskId, inputDone, btnCheck, inputDelete, btnDelete);
        formTask.appendChild(btnDiv);

        ul.appendChild(formTask);
      });
    } else {
      const li = document.createElement("li");
      li.textContent = "Aucune tâche pour ce projet";
      li.style.textAlign = "center";
      ul.appendChild(li);
    }

    card.appendChild(ul);

    // Formulaire terminer projet
    const finishForm = document.createElement("form");
    finishForm.method = "GET";
    const finishInput = document.createElement("input");
    finishInput.type = "hidden";
    finishInput.name = "deleteProject";
    finishInput.value = projet.Id_project;
    finishForm.appendChild(finishInput);

    const finishBtn = document.createElement("button");
    finishBtn.id = "finish";
    finishBtn.textContent = "Terminé !";
    finishForm.appendChild(finishBtn);
    card.appendChild(finishForm);

    // Bouton ajouter tâche
    const addTaskLink = document.createElement("a");
    addTaskLink.href = "#";
    addTaskLink.classList.add("main__btn_create_task");
    addTaskLink.dataset.projetId = projet.Id_project;
    addTaskLink.dataset.projetName = projet.project_name;
    addTaskLink.innerHTML = '<i class="bi bi-clipboard-plus"></i>';
    card.appendChild(addTaskLink);

    container.appendChild(card);
  });

  updateFinishButtons();
  colorDeadlines();
}
